/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  favicon: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  footerMail: string;
};

export type Richtext = Array<{
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
}>;

export type PhotoGallery = Array<{
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
}>;

export type PageTitle = string;

export type PageTeasers = Array<{
  title: string;
  description: string;
  linkLabel: string;
  linkReference: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  _type: "pageTeaser";
  _key: string;
}>;

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  meta?: {
    title: string;
    slug: Slug;
    description: string;
    keywords: Array<string>;
    hidden?: boolean;
  };
  content?: {
    pageImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "pageImage";
    };
    pageTitle?: PageTitle;
    pageTeaser?: PageTeasers;
    photoGallery?: PhotoGallery;
    agenda?: Array<{
      date: string;
      title: string;
      place: string;
      special?: boolean;
      link?: string;
      _type: "event";
      _key: string;
    }>;
    contacts?: Array<{
      name: string;
      email: string;
      phone: string;
      _type: "contact";
      _key: string;
    }>;
    textBlocks?: Richtext;
  };
  children?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "page";
  }>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type PageImage = {
  _type: "pageImage";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type Contacts = Array<{
  name: string;
  email: string;
  phone: string;
  _type: "contact";
  _key: string;
}>;

export type Agenda = Array<{
  date: string;
  title: string;
  place: string;
  special?: boolean;
  link?: string;
  _type: "event";
  _key: string;
}>;
export declare const internalGroqTypeReferenceTo: unique symbol;

// Source: ../site/src/lib/sanity/queries.ts
// Variable: getAllPages
// Query: *[_type == "page" && !meta.hidden] | order(meta.slug.current asc)
export type GetAllPagesResult = Array<{
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  meta?: {
    title: string;
    slug: Slug;
    description: string;
    keywords: Array<string>;
    hidden?: boolean;
  };
  content?: {
    pageImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "pageImage";
    };
    pageTitle?: PageTitle;
    pageTeaser?: PageTeasers;
    photoGallery?: PhotoGallery;
    agenda?: Array<{
      date: string;
      title: string;
      place: string;
      special?: boolean;
      link?: string;
      _type: "event";
      _key: string;
    }>;
    contacts?: Array<{
      name: string;
      email: string;
      phone: string;
      _type: "contact";
      _key: string;
    }>;
    textBlocks?: Richtext;
  };
  children?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "page";
  }>;
}>;
// Variable: getPageBySlug
// Query: *[_type == "page" && meta.slug.current == $slug]{	title,	meta {		...,		"slug": slug.current	},	content {		...,		pageTeaser[] {			title,			description,			linkLabel,			"link": linkReference->		}	}}[0]
export type GetPageBySlugResult = {
  title: string;
  meta: {
    title: string;
    slug: string;
    description: string;
    keywords: Array<string>;
    hidden?: boolean;
  } | null;
  content: {
    pageImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "pageImage";
    };
    pageTitle?: PageTitle;
    pageTeaser: Array<{
      title: string;
      description: string;
      linkLabel: string;
      link: {
        _id: string;
        _type: "page";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        title: string;
        meta?: {
          title: string;
          slug: Slug;
          description: string;
          keywords: Array<string>;
          hidden?: boolean;
        };
        content?: {
          pageImage?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "pageImage";
          };
          pageTitle?: PageTitle;
          pageTeaser?: PageTeasers;
          photoGallery?: PhotoGallery;
          agenda?: Array<{
            date: string;
            title: string;
            place: string;
            special?: boolean;
            link?: string;
            _type: "event";
            _key: string;
          }>;
          contacts?: Array<{
            name: string;
            email: string;
            phone: string;
            _type: "contact";
            _key: string;
          }>;
          textBlocks?: Richtext;
        };
        children?: Array<{
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          _key: string;
          [internalGroqTypeReferenceTo]?: "page";
        }>;
      };
    }> | null;
    photoGallery?: PhotoGallery;
    agenda?: Array<{
      date: string;
      title: string;
      place: string;
      special?: boolean;
      link?: string;
      _type: "event";
      _key: string;
    }>;
    contacts?: Array<{
      name: string;
      email: string;
      phone: string;
      _type: "contact";
      _key: string;
    }>;
    textBlocks?: Richtext;
  } | null;
} | null;

